name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.24.5'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Extract changelog for this version
        if [ -f CHANGELOG.md ]; then
          # Get changelog section for this version
          awk '/^## \['"${GITHUB_REF#refs/tags/v}"'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > release_notes.md
          if [ ! -s release_notes.md ]; then
            echo "No changelog found for this version. Using default release notes." > release_notes.md
            echo "" >> release_notes.md
            echo "See [CHANGELOG.md](CHANGELOG.md) for detailed changes." >> release_notes.md
          fi
        else
          echo "Release ${{ steps.get_version.outputs.version }}" > release_notes.md
          echo "" >> release_notes.md
          echo "See commit history for changes in this release." >> release_notes.md
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}

  build-and-upload:
    name: Build and Upload Assets
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: make deps

    - name: Run tests
      run: make test-all

    - name: Create release packages
      run: make release

    - name: Generate checksums
      run: |
        cd build/packages
        sha256sum *.tar.gz *.zip > checksums.txt

    - name: Upload release packages
      run: |
        cd build/packages
        for file in *.tar.gz *.zip checksums.txt; do
          echo "Uploading $file..."
          curl \
            -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$file" \
            "${{ needs.create-release.outputs.upload_url }}?name=$file"
        done

  docker-release:
    name: Docker Release
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract version
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          mysql-schema-sync:${{ steps.version.outputs.version }}
          mysql-schema-sync:latest
        labels: |
          org.opencontainers.image.title=MySQL Schema Sync
          org.opencontainers.image.description=CLI tool for synchronizing MySQL database schemas
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

  homebrew-update:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload]
    if: ${{ !contains(needs.create-release.outputs.version, '-') }}  # Only for stable releases

    steps:
    - name: Update Homebrew formula
      uses: dawidd6/action-homebrew-bump-formula@v3
      with:
        token: ${{ secrets.HOMEBREW_TOKEN }}
        formula: mysql-schema-sync
        tag: ${{ needs.create-release.outputs.version }}
        revision: ${{ github.sha }}

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload, docker-release]
    if: always()

    steps:
    - name: Notify success
      if: ${{ needs.build-and-upload.result == 'success' && needs.docker-release.result == 'success' }}
      run: |
        echo "✅ Release ${{ needs.create-release.outputs.version }} completed successfully!"
        echo "- Binaries uploaded to GitHub Releases"
        echo "- Docker images pushed to Docker Hub"

    - name: Notify failure
      if: ${{ needs.build-and-upload.result == 'failure' || needs.docker-release.result == 'failure' }}
      run: |
        echo "❌ Release ${{ needs.create-release.outputs.version }} failed!"
        echo "Check the workflow logs for details."
        exit 1